import { BaseEditor } from "slate";
import { ReactEditor } from "slate-react";
import { SlateElement, SlateLeaf } from "./app/_lib/types";
import { User } from "./app/db/schema";

declare global {
  interface Window {
    MathQuill: MathQuillStatic;
    pyodide: PyodideInterface;
    jsmeOnLoad: () => void;
    JSApplet: JSApplet;
    loadPyodide: (options?: {
      indexURL?: string;
      packageCacheDir?: string;
      lockFileURL?: string;
      fullStdLib?: boolean;
      stdLibURL?: string;
      stdin?: () => string;
      stdout?: (msg: string) => void;
      stderr?: (msg: string) => void;
      jsglobals?: object;
      args?: string[];
      env?: {
        [key: string]: string;
      };
      packages?: string[];
      pyproxyToStringRepr?: boolean;
      enableRunUntilComplete?: boolean;
      _node_mounts?: string[];
      _makeSnapshot?: boolean;
      _loadSnapshot?:
        | Uint8Array
        | ArrayBuffer
        | PromiseLike<Uint8Array | ArrayBuffer>;
    }) => Promise<PyodideInterface>;
  }

  const MathQuill: MathQuillStatic;

  interface MathQuillStatic {
    getInterface(version: number): MathQuillInterface;
  }

  interface MathQuillInterface {
    MathField(el: HTMLElement, config?: MathFieldConfig): MathField;
  }

  interface MathFieldConfig {
    spaceBehavesLikeTab?: boolean;
    leftRightIntoCmdGoes?: "up" | "down";
    restrictMismatchedBrackets?: boolean;
    sumStartsWithNEquals?: boolean;
    supSubsRequireOperand?: boolean;
    charsThatBreakOutOfSupSub?: string;
    autoSubscriptNumerals?: boolean;
    autoCommands?: string;
    autoOperatorNames?: string;
    substituteTextarea?: () => HTMLElement;
    handlers?: {
      edit?: (mathField: MathField) => void;
      enter?: (mathField: MathField) => void;
      upOutOf?: (mathField: MathField) => void;
      downOutOf?: (mathField: MathField) => void;
      moveOutOf?: (dir: number, mathField: MathField) => void;
      keystroke?: (
        key: string,
        event: KeyboardEvent,
        mathField: MathField,
      ) => boolean | undefined;
    };
  }

  interface MathField {
    latex(): string;
    latex(latexString: string): void;
    text(): string;
    cmd(latexString: string): void;
    write(latexString: string): void;
    focus(): void;
    blur(): void;
    revert(): void;
    reflow(): void;
    el(): HTMLElement;
    html(): string;
  }

  interface Document {
    jsapplets: JSMEInstance[];
  }

  type PyodideInterface = typeof PyodideAPI;
}

declare class PyodideAPI {
  /** @hidden */
  static version: string;
  /** @hidden */
  static loadPackage: typeof loadPackage;
  /** @hidden */
  static loadedPackages: {
    [key: string]: string;
  };
  /** @hidden */
  static ffi: {
    PyProxy: typeof PyProxy;
    PyProxyWithLength: typeof PyProxyWithLength;
    PyProxyWithGet: typeof PyProxyWithGet;
    PyProxyWithSet: typeof PyProxyWithSet;
    PyProxyWithHas: typeof PyProxyWithHas;
    PyDict: typeof PyDict;
    PyIterable: typeof PyIterable;
    PyAsyncIterable: typeof PyAsyncIterable;
    PyIterator: typeof PyIterator;
    PyAsyncIterator: typeof PyAsyncIterator;
    PyGenerator: typeof PyGenerator;
    PyAsyncGenerator: typeof PyAsyncGenerator;
    PyAwaitable: typeof PyAwaitable;
    PyCallable: typeof PyCallable;
    PyBuffer: typeof PyBuffer;
    PyBufferView: typeof PyBufferView;
    PythonError: typeof PythonError;
    PySequence: typeof PySequence;
    PyMutableSequence: typeof PyMutableSequence;
  };
  /** @hidden */
  static setStdin: typeof setStdin;
  /** @hidden */
  static setStdout: typeof setStdout;
  /** @hidden */
  static setStderr: typeof setStderr;
  /**
   *
   * An alias to the global Python namespace.
   *
   * For example, to access a variable called ``foo`` in the Python global
   * scope, use ``pyodide.globals.get("foo")``
   */
  static globals: PyProxy;
  /**
   * An alias to the `Emscripten File System API
   * <https://emscripten.org/docs/api_reference/Filesystem-API.html>`_.
   *
   * This provides a wide range of POSIX-`like` file/device operations, including
   * `mount
   * <https://emscripten.org/docs/api_reference/Filesystem-API.html#FS.mount>`_
   * which can be used to extend the in-memory filesystem with features like `persistence
   * <https://emscripten.org/docs/api_reference/Filesystem-API.html#persistent-data>`_.
   *
   * While all the file systems implementations are enabled, only the default
   * ``MEMFS`` is guaranteed to work in all runtime settings. The implementations
   * are available as members of ``FS.filesystems``:
   * ``IDBFS``, ``NODEFS``, ``PROXYFS``, ``WORKERFS``.
   */
  static FS: any;
  /**
   * An alias to the `Emscripten Path API
   * <https://github.com/emscripten-core/emscripten/blob/main/src/library_path.js>`_.
   *
   * This provides a variety of operations for working with file system paths, such as
   * ``dirname``, ``normalize``, and ``splitPath``.
   */
  static PATH: any;
  /**
   * See :ref:`js-api-pyodide-canvas`.
   * @hidetype
   */
  static canvas: CanvasInterface;
  /**
   * A map from posix error names to error codes.
   */
  static ERRNO_CODES: {
    [code: string]: number;
  };
  /**
   * An alias to the Python :ref:`pyodide <python-api>` package.
   *
   * You can use this to call functions defined in the Pyodide Python package
   * from JavaScript.
   */
  static pyodide_py: PyProxy;
  /**
   * Inspect a Python code chunk and use :js:func:`pyodide.loadPackage` to install
   * any known packages that the code chunk imports. Uses the Python API
   * :func:`pyodide.code.find\_imports` to inspect the code.
   *
   * For example, given the following code as input
   *
   * .. code-block:: python
   *
   *    import numpy as np
   *    x = np.array([1, 2, 3])
   *
   * :js:func:`loadPackagesFromImports` will call
   * ``pyodide.loadPackage(['numpy'])``.
   *
   * @param code The code to inspect.
   * @param options Options passed to :js:func:`pyodide.loadPackage`.
   * @param options.messageCallback A callback, called with progress messages
   *    (optional)
   * @param options.errorCallback A callback, called with error/warning messages
   *    (optional)
   * @param options.checkIntegrity If true, check the integrity of the downloaded
   *    packages (default: true)
   * @async
   */
  static loadPackagesFromImports(
    code: string,
    options?: {
      messageCallback?: (message: string) => void;
      errorCallback?: (message: string) => void;
      checkIntegrity?: boolean;
    },
  ): Promise<Array<PackageData>>;
  /**
   * Runs a string of Python code from JavaScript, using :py:func:`~pyodide.code.eval_code`
   * to evaluate the code. If the last statement in the Python code is an
   * expression (and the code doesn't end with a semicolon), the value of the
   * expression is returned.
   *
   * @param code The Python code to run
   * @param options
   * @param options.globals An optional Python dictionary to use as the globals.
   *        Defaults to :js:attr:`pyodide.globals`.
   * @param options.locals An optional Python dictionary to use as the locals.
   *        Defaults to the same as ``globals``.
   * @param options.filename An optional string to use as the file name.
   *        Defaults to ``"<exec>"``. If a custom file name is given, the
   *        traceback for any exception that is thrown will show source lines
   *        (unless the given file name starts with ``<`` and ends with ``>``).
   * @returns The result of the Python code translated to JavaScript. See the
   *          documentation for :py:func:`~pyodide.code.eval_code` for more info.
   * @example
   * async function main(){
   *   const pyodide = await loadPyodide();
   *   console.log(pyodide.runPython("1 + 2"));
   *   // 3
   *
   *   const globals = pyodide.toPy({ x: 3 });
   *   console.log(pyodide.runPython("x + 1", { globals }));
   *   // 4
   *
   *   const locals = pyodide.toPy({ arr: [1, 2, 3] });
   *   console.log(pyodide.runPython("sum(arr)", { locals }));
   *   // 6
   * }
   * main();
   */
  static runPython(
    code: string,
    options?: {
      globals?: PyProxy;
      locals?: PyProxy;
      filename?: string;
    },
  ): any;
  /**
   * Run a Python code string with top level await using
   * :py:func:`~pyodide.code.eval_code_async` to evaluate the code. Returns a promise which
   * resolves when execution completes. If the last statement in the Python code
   * is an expression (and the code doesn't end with a semicolon), the returned
   * promise will resolve to the value of this expression.
   *
   * For example:
   *
   * .. code-block:: pyodide
   *
   *    let result = await pyodide.runPythonAsync(`
   *        from js import fetch
   *        response = await fetch("./pyodide-lock.json")
   *        packages = await response.json()
   *        # If final statement is an expression, its value is returned to JavaScript
   *        len(packages.packages.object_keys())
   *    `);
   *    console.log(result); // 79
   *
   * .. admonition:: Python imports
   *    :class: warning
   *
   *    Since pyodide 0.18.0, you must call :js:func:`loadPackagesFromImports` to
   *    import any python packages referenced via ``import`` statements in your
   *    code. This function will no longer do it for you.
   *
   * @param code The Python code to run
   * @param options
   * @param options.globals An optional Python dictionary to use as the globals.
   * Defaults to :js:attr:`pyodide.globals`.
   * @param options.locals An optional Python dictionary to use as the locals.
   *        Defaults to the same as ``globals``.
   * @param options.filename An optional string to use as the file name.
   *        Defaults to ``"<exec>"``. If a custom file name is given, the
   *        traceback for any exception that is thrown will show source lines
   *        (unless the given file name starts with ``<`` and ends with ``>``).
   * @returns The result of the Python code translated to JavaScript.
   * @async
   */
  static runPythonAsync(
    code: string,
    options?: {
      globals?: PyProxy;
      locals?: PyProxy;
      filename?: string;
    },
  ): Promise<any>;
  /**
   * Registers the JavaScript object ``module`` as a JavaScript module named
   * ``name``. This module can then be imported from Python using the standard
   * Python import system. If another module by the same name has already been
   * imported, this won't have much effect unless you also delete the imported
   * module from :py:data:`sys.modules`. This calls
   * :func:`~pyodide.ffi.register_js_module`.
   *
   * Any attributes of the JavaScript objects which are themselves objects will
   * be treated as submodules:
   * ```pyodide
   * pyodide.registerJsModule("mymodule", { submodule: { value: 7 } });
   * pyodide.runPython(`
   *     from mymodule.submodule import value
   *     assert value == 7
   * `);
   * ```
   * If you wish to prevent this, try the following instead:
   * ```pyodide
   * const sys = pyodide.pyimport("sys");
   * sys.modules.set("mymodule", { obj: { value: 7 } });
   * pyodide.runPython(`
   *     from mymodule import obj
   *     assert obj.value == 7
   *     # attempting to treat obj as a submodule raises ModuleNotFoundError:
   *     # "No module named 'mymodule.obj'; 'mymodule' is not a package"
   *     from mymodule.obj import value
   * `);
   * ```
   *
   * @param name Name of the JavaScript module to add
   * @param module JavaScript object backing the module
   */
  static registerJsModule(name: string, module: object): void;
  /**
   * Unregisters a JavaScript module with given name that has been previously
   * registered with :js:func:`pyodide.registerJsModule` or
   * :func:`~pyodide.ffi.register_js_module`. If a JavaScript module with that
   * name does not already exist, will throw an error. Note that if the module has
   * already been imported, this won't have much effect unless you also delete the
   * imported module from :py:data:`sys.modules`. This calls
   * :func:`~pyodide.ffi.unregister_js_module`.
   *
   * @param name Name of the JavaScript module to remove
   */
  static unregisterJsModule(name: string): void;
  /**
   * Convert a JavaScript object to a Python object as best as possible.
   *
   * This is similar to :py:meth:`~pyodide.ffi.JsProxy.to_py` but for use from
   * JavaScript. If the object is immutable or a :js:class:`~pyodide.ffi.PyProxy`,
   * it will be returned unchanged. If the object cannot be converted into Python,
   * it will be returned unchanged.
   *
   * See :ref:`type-translations-jsproxy-to-py` for more information.
   *
   * @param obj The object to convert.
   * @param options
   * @returns The object converted to Python.
   */
  static toPy(
    obj: any,
    {
      depth,
      defaultConverter,
    }?: {
      /**
       *  Optional argument to limit the depth of the conversion.
       */
      depth: number;
      /**
       * Optional argument to convert objects with no default conversion. See the
       * documentation of :py:meth:`~pyodide.ffi.JsProxy.to_py`.
       */
      defaultConverter?: (
        value: any,
        converter: (value: any) => any,
        cacheConversion: (input: any, output: any) => void,
      ) => any;
    },
  ): any;
  /**
   * Imports a module and returns it.
   *
   * If `name` has no dot in it, then `pyimport(name)` is approximately
   * equivalent to:
   * ```js
   * pyodide.runPython(`import ${name}; ${name}`)
   * ```
   * except that `name` is not introduced into the Python global namespace. If
   * the name has one or more dots in it, say it is of the form `path.name`
   * where `name` has no dots but path may have zero or more dots. Then it is
   * approximately the same as:
   * ```js
   * pyodide.runPython(`from ${path} import ${name}; ${name}`);
   * ```
   *
   * @param mod_name The name of the module to import
   *
   * @example
   * pyodide.pyimport("math.comb")(4, 2) // returns 4 choose 2 = 6
   */
  static pyimport(mod_name: string): any;
  /**
   * Unpack an archive into a target directory.
   *
   * @param buffer The archive as an :js:class:`ArrayBuffer` or :js:class:`TypedArray`.
   * @param format The format of the archive. Should be one of the formats
   * recognized by :py:func:`shutil.unpack_archive`. By default the options are
   * ``'bztar'``, ``'gztar'``, ``'tar'``, ``'zip'``, and ``'wheel'``. Several
   * synonyms are accepted for each format, e.g., for ``'gztar'`` any of
   * ``'.gztar'``, ``'.tar.gz'``, ``'.tgz'``, ``'tar.gz'`` or ``'tgz'`` are
   * considered to be
   * synonyms.
   *
   * @param options
   * @param options.extractDir The directory to unpack the archive into. Defaults
   * to the working directory.
   */
  static unpackArchive(
    buffer: TypedArray | ArrayBuffer,
    format: string,
    options?: {
      extractDir?: string;
    },
  ): void;
  /**
   * Mounts a :js:class:`FileSystemDirectoryHandle` into the target directory.
   * Currently it's only possible to acquire a
   * :js:class:`FileSystemDirectoryHandle` in Chrome.
   *
   * @param path The absolute path in the Emscripten file system to mount the
   * native directory. If the directory does not exist, it will be created. If
   * it does exist, it must be empty.
   * @param fileSystemHandle A handle returned by
   * :js:func:`navigator.storage.getDirectory() <getDirectory>` or
   * :js:func:`window.showDirectoryPicker() <showDirectoryPicker>`.
   */
  static mountNativeFS(
    path: string,
    fileSystemHandle: FileSystemDirectoryHandle,
  ): Promise<NativeFS>;
  /**
   * Mounts a host directory into Pyodide file system. Only works in node.
   *
   * @param emscriptenPath The absolute path in the Emscripten file system to
   * mount the native directory. If the directory does not exist, it will be
   * created. If it does exist, it must be empty.
   * @param hostPath The host path to mount. It must be a directory that exists.
   */
  static mountNodeFS(emscriptenPath: string, hostPath: string): void;
  /**
   * Tell Pyodide about Comlink.
   * Necessary to enable importing Comlink proxies into Python.
   */
  static registerComlink(Comlink: any): void;
  /**
   * Sets the interrupt buffer to be ``interrupt_buffer``. This is only useful
   * when Pyodide is used in a webworker. The buffer should be a
   * :js:class:`SharedArrayBuffer` shared with the main browser thread (or another
   * worker). In that case, signal ``signum`` may be sent by writing ``signum``
   * into the interrupt buffer. If ``signum`` does not satisfy 0 < ``signum`` < 65
   * it will be silently ignored.
   *
   * You can disable interrupts by calling ``setInterruptBuffer(undefined)``.
   *
   * If you wish to trigger a :py:exc:`KeyboardInterrupt`, write ``SIGINT`` (a 2)
   * into the interrupt buffer.
   *
   * By default ``SIGINT`` raises a :py:exc:`KeyboardInterrupt` and all other signals
   * are ignored. You can install custom signal handlers with the signal module.
   * Even signals that normally have special meaning and can't be overridden like
   * ``SIGKILL`` and ``SIGSEGV`` are ignored by default and can be used for any
   * purpose you like.
   */
  static setInterruptBuffer(interrupt_buffer: TypedArray): void;
  /**
   * Throws a :py:exc:`KeyboardInterrupt` error if a :py:exc:`KeyboardInterrupt` has
   * been requested via the interrupt buffer.
   *
   * This can be used to enable keyboard interrupts during execution of JavaScript
   * code, just as :c:func:`PyErr_CheckSignals` is used to enable keyboard interrupts
   * during execution of C code.
   */
  static checkInterrupt(): void;
  /**
   * Turn on or off debug mode. In debug mode, some error messages are improved
   * at a performance cost.
   * @param debug If true, turn debug mode on. If false, turn debug mode off.
   * @returns The old value of the debug flag.
   */
  static setDebug(debug: boolean): boolean;
  static makeMemorySnapshot(): Uint8Array;
}

declare module "slate" {
  interface CustomTypes {
    Editor: BaseEditor & ReactEditor;
    Element: SlateElement;
    Text: SlateLeaf;
  }
}

declare module "next-auth" {
  export interface Session {
    user: User;
  }
}
